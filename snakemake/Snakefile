import os
import synapseclient
import synapseutils
import glob
import re
import time
from synapseclient import Folder, File

#for synapse
syn = synapseclient.login()

BAMNAMELIST = config["inFileName"]
print ('file list:',BAMNAMELIST)
print ('lst:', BAMNAMELIST[0])

#change this to your home directory
homeDir = '/home/centos/p_3'

#ID of the folder of the BAM folder we want to process
BAMFolderSynId = 'syn4486995'
print ('BAM folder syn ID:', BAMFolderSynId)
#get all the BAM file IDs
walkedPath = synapseutils.walk(syn, BAMFolderSynId)
BAMIDLIST = []
nameIdDict = {}

for dirpath, dirname, filename in walkedPath:
	for (bamFileName,bamFileSynId) in filename:
		if bamFileName != BAMNAMELIST:
			continue
		BAMIDLIST.append(bamFileSynId)
		nameIdDict[bamFileName] = bamFileSynId
		
print ('BAM ID list:', BAMIDLIST)


rule all:
	input:
		a=expand('/tmp/{bamFile}_files_uploaded.txt', bamFile=BAMNAMELIST)
		
rule download_BAM_File:
	input:
		a = 'need.txt'	
	output:
		b = touch('{bamFile}_LOG.txt')
			
	run:
		print ('Downloading file synapse ID:',wildcards.bamFile)
		downloadDir = '/tmp' 
		entity = syn.get(nameIdDict[wildcards.bamFile], downloadLocation = downloadDir)
		#touch file
		os.system('touch ' + output.b)
		

rule convert_BAM_to_Fastq:
	input:
		a='{bamFile}_LOG.txt'
		
	output:
		a = touch('/tmp/{bamFile}.R1.fastq'), 
		b = touch('/tmp/{bamFile}.R2.fastq')
	params:
		samToFastqCmd='/home/centos/bin/picard.jar SamToFastq', inBamFile = '/tmp/{bamFile}'
	
	shell:
		"""
		java  -jar {params.samToFastqCmd} I={params.inBamFile} FASTQ={output.a} SECOND_END_FASTQ={output.b} VALIDATION_STRINGENCY=LENIENT ;
		touch {output.a} ;\
		touch {output.b} ;\
		"""
		
rule align_star:
	input:
		a = '/tmp/{bamFile}.R1.fastq', 
		b = '/tmp/{bamFile}.R2.fastq'
	output:
		a = touch('/tmp/{bamFile}_STAR_Aligned.sortedByCoord.out.bam')
	params:
		starPath = '/home/centos/miniconda/bin/', 
		outNamePrefix = '/tmp/{bamFile}_STAR_', 
		numThreads = '16',
		genomeDir='/home/centos/data_2/STAR_MM10',
		inBamFile = '/tmp/{bamFile}'
	shell:
		"""
		{params.starPath}STAR --runThreadN {params.numThreads} --genomeDir {params.genomeDir} --outSAMtype BAM SortedByCoordinate --outFileNamePrefix {params.outNamePrefix} --readFilesIn {input.a} {input.b} ; \
		touch {output.a}
		"""
		
rule sort_by_read_name:
	input:
		a = '/tmp/{bamFile}_STAR_Aligned.sortedByCoord.out.bam'
	output:
		a = touch('/tmp/{bamFile}_STAR_Aligned.sortedByReadName.bam')
	params:
		sortCmd = '/home/centos/miniconda/bin/samtools sort'
	shell:
		"""
		{params.sortCmd} -n -o {output.a} {input.a} ;\
		touch {output.a}
		"""		
		
rule count_reads_HTSeq:
	input:
		a = '/tmp/{bamFile}_STAR_Aligned.sortedByReadName.bam'
	output:
		a=touch('/tmp/{bamFile}_counts.txt')
	params:
		TRANSCRIPTS = '/home/centos/data_2/mm10_ERCC92_tab.gtf', samToolsCmd = '/home/centos/miniconda/bin/samtools',htseqCmd = '/home/centos/miniconda/bin/htseq-count'
	shell:
		"""
		{params.samToolsCmd} view {input.a} |  {params.htseqCmd} -q -s no - {params.TRANSCRIPTS}  >  {output.a}
		touch {output.a}
		"""
	

rule run_FastQC:
	input:
		a = '/tmp/{bamFile}.R1.fastq', 
		b = '/tmp/{bamFile}.R2.fastq',
		c = '/tmp/{bamFile}_counts.txt'
	output:
		a = touch('/tmp/{bamFile}_FastQC')
	params:
		fastQCCmd = '/home/centos/miniconda/FastQC/fastqc'
	shell:
		"""
		#make the directory
		mkdir {output.a} ;
		{params.fastQCCmd} {input.a} -o {output.a} ; 
		{params.fastQCCmd} {input.b} -o {output.a} ;
		touch {output.a} 
		"""

rule upload_files:
	input:
		a = '/tmp/{bamFile}_FastQC'
	output:
		a = touch('/tmp/{bamFile}_files_uploaded.txt')
	run:
		print ('Uploading files')
		#copy files back to local directory
		os.system("echo 'Uploading following files:' >> " + output.a)
		#make another folder for this bam file, test 7 = syn8525762, test 8 = syn8669305, test_9 = syn8687215, test_10= syn8697754
		bamFileFolder = Folder(name=wildcards.bamFile+'_RNAseq', parent='syn8697754')
		bamFileFolder = syn.store(bamFileFolder)
		#make a fastQC results folder
		fastQCFolder = Folder(name='fastQC', parent=bamFileFolder)
		fastQCFolder = syn.store(fastQCFolder)
		#make a STAR results folder
		STARfolder = Folder(name='STAR', parent=bamFileFolder)
		STARfolder = syn.store(STARfolder)
		
		#########
		#go thru files
		for file in glob.glob("/tmp/*"+wildcards.bamFile+"*"):
			#skip if file size is zero, need to check which one are those
			if os.stat(file).st_size == 0:
				cmd = "echo empty file '" + file + " ' >> " + output.a
				os.system(cmd)
				continue
			
			#skip the files_uploaded file
			if re.search(r'files_uploaded',file):
				continue
			#skip the STARtmp folder
			if re.search(r'STAR_STARtmp', file):
				#delete this tmp folder
				cmd = "rm -r " + file
				os.system(cmd)				
				continue
			#skip uploading the original BAM file
			if file == wildcards.bamFile:
				cmd = "rm " + file
				os.system(cmd)
				continue
			#upload the fastQC folder files
			if re.search(r'FastQC', file):
				print ('fastqc:', file)
				#store the fastq files to the folder after looping in it
				for fName in os.listdir(file):
					upFile = File(path=os.path.join(file,fName), parent=fastQCFolder)
					upFile = syn.store(upFile)
					cmd = "echo uploading '" + fName + " ' >> " + output.a
					os.system(cmd)
				#delete the files after uploading
				cmd = "rm -r " + file
				os.system(cmd)
				continue
				
			#put the STAR files into a folder as well
			if re.search(r'STAR', file):
				print ('STAR:',file)
				upFile = File(path=file, parent=STARfolder)
				upFile = syn.store(upFile)
				cmd = "echo uploading '" + file + " ' >> " + output.a
				os.system(cmd)
				cmd = "rm -r  " + file
				os.system(cmd)
				continue
			#copy rest of the BAM files
			cmd = "echo uploading '" + file + " ' >> " + output.a
			os.system(cmd)
			upFile = File(path=file, parent=bamFileFolder)
			upFile = syn.store(upFile)
			cmd = "rm -r  " + file
			os.system(cmd)
		
		
		#copy back to home directory
		os.system("cp " + output.a + ' ' + homeDir)
		
		
		
		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
